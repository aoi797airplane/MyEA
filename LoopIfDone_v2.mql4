//+------------------------------------------------------------------+
//|                                                   LoopIfDone.mq4 |
//|                                                     Aoi Morimoto |
//|                                        https://fx-libraries.com/ |
//+------------------------------------------------------------------+
#include <stdlib.mqh>
#property copyright "Aoi Morimoto"
#property link      "https://fx-libraries.com/"
#property description "Loop If Done Expert Advisor"
#property version   "1.01"
#property strict
#define MAGICMA  20201015

//--- Inputs
input double Lots           =0.1;
input double DecreaseFactor =0;
input int    MaximumPosition=5;
input double PriceRange     =500;
input string x="LossCut -> Enable(recommended):0, Disanable:1";
input int    LossCut        =0;

//--- Variable
int    NowPositionCount =0;
int    OldPositionCount =0;
int    NowOrderCount    =0;
int    OldOrderCount    =0;
double LossCutPoint     =PriceRange*MaximumPosition;

int    FirstTrade       =0;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{   
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Calculate optimal lot size                                       |
//+------------------------------------------------------------------+
double LotsOptimized()
{
    double lot=Lots;
    int    orders=OrdersHistoryTotal();
    int    losses=0;

    //--- calculate number of losses orders without a break
    if(DecreaseFactor>0)
    {
        for(int i=orders-1;i>=0;i--)
        {
            if(OrderSelect(i,SELECT_BY_POS,MODE_HISTORY)==false)
            {
                Print("Error in history!(LotsOptimized)");
                break;
            }
            if(OrderSymbol()!=Symbol() || OrderType()>OP_SELL)
                continue;
            //---
            if(OrderProfit()>0) break;
            if(OrderProfit()<0) losses++;
        }
    if(losses>1)
        lot=NormalizeDouble(lot-lot*losses/DecreaseFactor,1);
    }
    //--- return lot size
    if(lot<0.1) lot=0.1;
    return(lot);
}
  
//+------------------------------------------------------------------+
//| Check for position and order                                     |
//+------------------------------------------------------------------+
int CheckForNewPositionAndOrder()
{
    // 0 -> Neither positon nor order is made.
    // 1 -> An order become position.
    // 2 -> A position is closed.
    int r=0;
    NowPositionCount = 0;
    NowOrderCount = 0;
    
    for(int i=OrdersTotal()-1;i>=0;i--)
    {
        if(OrderSelect(i,SELECT_BY_POS,MODE_TRADES)==false) 
        {
            printf("Error in history!(CheckForNewPositionAndOrder)");
            return 0;
        }
        if(OrderSymbol() != Symbol() || OrderMagicNumber() != MAGICMA) continue;
        r++;
        if(OrderType() == OP_BUY)
        {
            NowPositionCount+=1;
        }
        if(OrderType() == OP_BUYLIMIT)
        {
            NowOrderCount+=1;
        }
    }
    printf("r, %d",r);
    printf("now, %d, %d",NowPositionCount,NowOrderCount);
    if(NowPositionCount == OldPositionCount && NowOrderCount == OldOrderCount) return 0;
    else if(NowPositionCount+NowOrderCount == MaximumPosition && NowPositionCount > OldPositionCount)
    {
        //Oldを更新
        return 1;
    }
    else if(NowPositionCount < OldPositionCount)
    {
        return 2;
    }
    return 0;
}

//+------------------------------------------------------------------+
//| OnTick function                                                  |
//+------------------------------------------------------------------+
void OnTick()
{
    int res;
    
//--- check for trading
    if(IsTradeAllowed()==false)
        return;
    else if(FirstTrade==0)
    {
        //--- first buy action
        res=OrderSend(Symbol(),OP_BUY,LotsOptimized(),Ask,3,Ask-LossCutPoint*Point,Ask+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
        if(res == -1)
        {
            int err = GetLastError();
            printf("[OrderSendError] : " , err , " ", ErrorDescription(err));
            printf("LoopIfDone プログラムを起動できません");
            return;
        }
        //PositionCheck(res);
        
        FollowPositionOrder(MaximumPosition-1);
        printf("LoopIfDone プログラムの起動に成功しました");

        FirstTrade++;
        OldPositionCount=1;
        OldOrderCount=MaximumPosition-1;
        printf("First Trade, %d, %d",OldPositionCount, OldOrderCount);
        Sleep(300);
        return;
    }
    else
    {
        int branch=CheckForNewPositionAndOrder();
        if(branch==0) return;
        else if(branch==1)
        {
            OldPositionCount = NowPositionCount;
            OldOrderCount = NowOrderCount;
            return;
        }
        else if(branch==2)
        {
            if(OrderSelect(OrdersHistoryTotal()-1,SELECT_BY_POS,MODE_HISTORY)==false)
            {
                printf("Error in orderselect!(branch2)");
                return;
            }
            
            //--- 直前の決済が利確
            if(OrderProfit() > 0)
            {
                if(NowPositionCount == 0)
                {
                    res=OrderSend(Symbol(),OP_BUY,LotsOptimized(),Ask,3,Ask-LossCutPoint*Point,Ask+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
                    if(res == -1)
                    {
                        int err = GetLastError();
                        Print("[OrderSendError] : " , err , " ", ErrorDescription(err));
                        return;
                    }
                    double oop = OrderOpenPrice();
                    res=OrderSend(Symbol(),OP_BUYLIMIT,LotsOptimized(),oop,3,oop-LossCutPoint*Point,oop+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
                    if(res == -1)
                    {
                        int err = GetLastError();
                        Print("[OrderSendError] : " , err , " ", ErrorDescription(err));
                        return;
                    }
                    //OrderCheck(res);
                    FarOrderDelete(MAGICMA);
                    NowPositionCount++;
                    
                    OldPositionCount = NowPositionCount;
                    OldOrderCount = NowOrderCount;
                    printf("%d, %d",OldPositionCount, OldOrderCount);
                    Sleep(300);
                    return;
                }
                else if(NowPositionCount > 0)
                {
                    double oop = OrderOpenPrice();
                    res=OrderSend(Symbol(),OP_BUYLIMIT,LotsOptimized(),oop,3,oop-LossCutPoint*Point,oop+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
                    if(res == -1)
                    {
                        int err = GetLastError();
                        Print("[OrderSendError] : " , err , " ", ErrorDescription(err));
                        return;
                    }
                    //OrderCheck(res);
                    NowOrderCount++;

                    OldPositionCount = NowPositionCount;
                    OldOrderCount = NowOrderCount;
                    printf("%d, %d",OldPositionCount, OldOrderCount);
                    Sleep(300);
                    return;
                }
                
            }

            //--- 直前の決済が損切り
            else if(OrderProfit() < 0)
            {
                res=OrderSend(Symbol(),OP_BUY,LotsOptimized(),Ask,3,Ask-LossCutPoint*Point,Ask+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
                if(res == -1)
                {
                    int err = GetLastError();
                    Print("[OrderSendError] : " , err , " ", ErrorDescription(err));
                    return;
                }
                //PositionCheck(res);
                NowPositionCount++;

                OldPositionCount = NowPositionCount;
                OldOrderCount = NowOrderCount;
                printf("%d, %d",OldPositionCount, OldOrderCount);
                Sleep(300);
                return;
            }
        }
    }
//---
}
//+------------------------------------------------------------------+
int MyOrderSend(
    int IsLossCut,
    string   symbol,
    int      cmd,
    double   volume,
    double   price,
    int      slippage,
    double   stoploss,
    double   takeprofit,
    string   comment     = NULL,
    int      magic       = 0,
    datetime expiration  = 0,
    color    arrow_color = clrNONE
    )
    {
        int res;
        if(IsLossCut == 0)//損切りあり
        {
            res=OrderSend(Symbol(),OP_BUY,LotsOptimized(),Ask,3,Ask-LossCutPoint*Point,Ask+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
            return res;
        }

        else if(IsLossCut == 1)//損切りなし
        {
            res=OrderSend(Symbol(),OP_BUY,LotsOptimized(),Ask,3,0,Ask+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
            return res;
        }

        else
        {
            printf("MyOrderSend function has error.");
            return -1;
        }
    }

void allOrderClose(int aMagic,int aSlippage)
{
    for(int i=OrdersTotal()-1; i>=0; i--)
    {
        if(OrderSelect(i,SELECT_BY_POS)==false) break;

        if(OrderSymbol()!=Symbol() || OrderMagicNumber()!=aMagic) continue;

        int type=OrderType();

        if(type!=OP_BUY && type!=OP_SELL) continue;

        int ticket=OrderTicket();

        bool result=orderCloseReliable(ticket,OrderLots(),OrderClosePrice(),aSlippage);

        if(result==false)
        {
            Print("allOrderClose: Ticket #",ticket,", failed to close");
        }
    }
}

void allOrderDelete(int aMagic)
{
    for(int i=OrdersTotal()-1; i>=0; i--)
    {
        if(OrderSelect(i,SELECT_BY_POS)==false) break;

        if(OrderSymbol()!=Symbol() || OrderMagicNumber()!=aMagic) continue;

        int type=OrderType();

        if(type==OP_BUY || type==OP_SELL) continue;

        int ticket=OrderTicket();

        bool result=orderDeleteReliable(ticket);

        if(result==false)
        {
            Print("allOrderDelete: Ticket #",ticket,", failed to delete");
        }
    }
}

void FollowPositionOrder(int OrderNum)
{
    for(int i=1;i<=OrderNum;i++)
    {
        int res;
        res=OrderSend(Symbol(),OP_BUYLIMIT,LotsOptimized(),Ask-i*PriceRange*Point,3,Ask-i*PriceRange*Point-LossCutPoint*Point,Ask-i*PriceRange*Point+PriceRange*Point,"LoopIfDone",MAGICMA,0,Blue);
        if(res == -1)
        {
            int err = GetLastError();
            Print("[OrderSendError] : " , err , " ", ErrorDescription(err));
        }
    }
}

bool orderCloseReliable(int aTicket,double aLots,double aPrice,int aSlippage,color aArrow_color=CLR_NONE)
{
    bool result=false;
    uint startTime=GetTickCount();
    bool selected=OrderSelect(aTicket,SELECT_BY_TICKET,MODE_TRADES);

    string symbol = OrderSymbol();
    int    type   = OrderType();

    int digits=(int)MarketInfo(symbol,MODE_DIGITS);

    while(true)
    {
        if(IsStopped())
        {
            return(false);
        }

        // if(GetTickCount()-startTime>MAX_RETRY_TIME*MILLISEC_2_SEC)
        // {
        //     return(false);
        // }

        // MarketInfo関数でレートを取得しており、定義済変数であるAskとBidは未使用のため、不要のはずだけど、念のため
        RefreshRates();

        if(type==OP_BUY)
        {
            aPrice=MarketInfo(symbol,MODE_BID);
        }
        else if(type==OP_SELL)
        {
            aPrice=MarketInfo(symbol,MODE_ASK);
        }

        aPrice=NormalizeDouble(aPrice,digits);

        if(IsTradeContextBusy())
        {}
        else
        {
            result=OrderClose(aTicket,aLots,aPrice,aSlippage,aArrow_color);

            if(result)
            {
                return(result);
            }

            int err=GetLastError();

            // 一時的エラーの場合はリトライするが、恒常的エラーの場合は処理中断（リトライしてもエラーになるため）
            if(err == ERR_NO_ERROR ||
                err == ERR_COMMON_ERROR ||
                err == ERR_SERVER_BUSY ||
                err == ERR_NO_CONNECTION ||
                err == ERR_TOO_FREQUENT_REQUESTS ||
                err == ERR_TRADE_TIMEOUT ||
                err == ERR_INVALID_PRICE ||
                err == ERR_TRADE_DISABLED ||
                err == ERR_PRICE_CHANGED ||
                err == ERR_OFF_QUOTES ||
                err == ERR_BROKER_BUSY ||
                err == ERR_REQUOTE ||
                err == ERR_TOO_MANY_REQUESTS ||
                err==ERR_TRADE_CONTEXT_BUSY)
            {}
            else
            {
                return(result);
            }

            // 最適化とバックテスト時はリトライは不要
            if(IsOptimization() || IsTesting())
            {
                return(result);
            }
        }
    // Sleep(SLEEP_TIME*MILLISEC_2_SEC);
    }

    return(result);
}

bool orderDeleteReliable(int aTicket)
{
    bool result=false;
    uint startTime=GetTickCount();
    while(true)
    {
        if(IsStopped())
        {
            return(false);
        }
        // if(GetTickCount()-startTime>MAX_RETRY_TIME*MILLISEC_2_SEC)
        // {
        //     return(false);
        // }
        if(IsTradeContextBusy())
        {}
        else
        {
            result=OrderDelete(aTicket);

            if(result)
            {
                return(result);
            }

            int err=GetLastError();

            // 一時的エラーの場合はリトライするが、恒常的エラーの場合は処理中断（リトライしてもエラーになるため）
            if(err == ERR_NO_ERROR ||
                err == ERR_COMMON_ERROR ||
                err == ERR_SERVER_BUSY ||
                err == ERR_NO_CONNECTION ||
                err == ERR_TOO_FREQUENT_REQUESTS ||
                err == ERR_TRADE_TIMEOUT ||
                err == ERR_INVALID_PRICE ||
                err == ERR_TRADE_DISABLED ||
                err == ERR_PRICE_CHANGED ||
                err == ERR_OFF_QUOTES ||
                err == ERR_BROKER_BUSY ||
                err == ERR_REQUOTE ||
                err == ERR_TOO_MANY_REQUESTS ||
                err==ERR_TRADE_CONTEXT_BUSY)
            {}
            else
            {
                return(result);
            }

            // 最適化とバックテスト時はリトライは不要
            if(IsOptimization() || IsTesting())
            {
                return(result);
            }
        }

        // Sleep(SLEEP_TIME*MILLISEC_2_SEC);
    }

    return(result);
}

void PositionCheck(int res, int aMagic=MAGICMA)
{
    while(true)
    {
        for(int i=OrdersTotal()-1; i>=0; i--)
        {
            if(OrderSelect(i,SELECT_BY_POS)==false) break;

            if(OrderSymbol()!=Symbol() || OrderMagicNumber()!=aMagic) continue;

            int type=OrderType();

            if(type!=OP_BUY && type!=OP_SELL) continue;

            int ticket=OrderTicket();

            if(ticket==res)
            {
                return;
            }

        }
    }
    return;
}

void OrderCheck(int res, int aMagic=MAGICMA)
{
    while(true)
    {
        for(int i=OrdersTotal()-1; i>=0; i--)
        {
            if(OrderSelect(i,SELECT_BY_POS)==false) break;

            if(OrderSymbol()!=Symbol() || OrderMagicNumber()!=aMagic) continue;

            int type=OrderType();

            if(type==OP_BUY || type==OP_SELL) continue;

            int ticket=OrderTicket();

            if(ticket==res)
            {
                return;
            }
        }
    }
    return;
}

void FarOrderDelete(int aMagic)
{
    double distance=0;
    double nowDistance;
    int ticket;
    for(int i=OrdersTotal()-1; i>=0; i--)
    {
        if(OrderSelect(i,SELECT_BY_POS)==false) break;

        if(OrderSymbol()!=Symbol() || OrderMagicNumber()!=aMagic) continue;

        int type=OrderType();

        if(type==OP_BUY || type==OP_SELL) continue;

        nowDistance = MathAbs(OrderOpenPrice()-Ask);
        
        if(distance < nowDistance)
        {
            distance = nowDistance;
            ticket=OrderTicket();
        }
    }
    OrderDelete(ticket);
}